---
name: Titanium.UI.iOS.PreviewContext
summary: |
    A PreviewContext provides options to configure the iOS9 3D-Touch feature "Peek and Pop".
description: |
    The PreviewContext is created by the <Titanium.UI.iOS.createPreviewContext> method.

    Use this class to configure the previewing context which is displayed while "peeking" a view.

    Note: This feature required iOS9 and a 3D-Touch capable device (such as iPhone 6S or iPhone 6S Plus).
    To check the current device support, use <Ti.UI.iOS.forceTouchSupported> and consider to use the longpress
    event to provide a fallback to your users.

    See also:

    *  [Official 3D-Touch docs by Apple](https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/Adopting3DTouchOniPhone/3DTouchAPIs.html)

platforms: [iphone]
since: "5.1.0"
extends: Titanium.Proxy
osver: {ios: {min: "9.0"}}

properties:
  - name: actions
    summary: The preview actions and preview action groups.
    description: |
        Provides an array with elements of the type [Titanium.UI.iOS.PreviewAction](Titanium.UI.iOS.PreviewAction)
        and [Ti.UI.iOS.PreviewActionGroup](Titanium.UI.iOS.PreviewActionGroup). Both can be used together.
    type: Array<Titanium.UI.iOS.PreviewAction>
    optional: true

  - name: contentHeight
    summary: The height of the preview.
    description: |
        Specified the height of the preview which will be shown during "peeking".
    type: Number
    optional: true
    default: The available height of the screen.

  - name: pop
    summary: The callback after popping the preview.
    description: |
        Called after the user the preview is popped. You will most likely open a window in here.
    type: Callback<PreviewPopResponse>
    optional: false

  - name: preview
    summary: The preview view.
    description: |
        Provides the preview for "peeking". This view is independent from the window which can be openend after
        "popping" the preview to give you the change to provide different layouts for the preview and the full
        window.
    type: Titanium.UI.View
    optional: false

examples:
  - title: PreviewContext example using a <Titanium.UI.Button> as receiver.
    example: |
        In the example below, we create a new preview context, assign a `window`, `actions` and a `contentHeight`.
        After that, we assign the preview context to a view which will trigger the "peeking" of it. Note, that this
        is independent from the click event of the view itself.

            var actions = [];
            var win = Ti.UI.createWindow({
                backgroundColor: "white"
            });

            // The view to be previewed while popping.
            var previewView = Ti.UI.createView({
                backgroundColor: "blue"
            });

            // The window to be opened after popping the preview.
            var detailWindow = Ti.UI.createWindow({
                backgroundColor: "yellow"
            });

            detailWindow.add(Ti.UI.createLabel({
                text: "You made it!"
            }));

            // The actions to be added to the preview context.
            var action = Ti.UI.iOS.createPreviewAction({
                title: "Preview Action",
                style: Ti.UI.iOS.PREVIEW_ACTION_STYLE_DEFAULT
            });

            action.addEventListener("click", function(e) {
                alert("Title: " + e.title + " / Style: " + e.style+" / Index: " + e.index);
            });

            var subAction = Ti.UI.iOS.createPreviewAction({
                title: "Preview Subaction"
            })

            subAction.addEventListener("click", function(e) {
                alert("Title: " + e.title + " / Style: " + e.style+" / Subindex: " + e.index);
            });

            var actionGroup = Ti.UI.iOS.createPreviewActionGroup({
                title: "More actions...",
                style: Ti.UI.iOS.PREVIEW_ACTION_STYLE_DESTRUCTIVE,
                actions: [subAction]
            });

            actions.push(action);
            actions.push(actionGroup);

            // Create the preview context
            var context = Ti.UI.iOS.createPreviewContext({
                preview: previewView,
                actions: actions, // Can have both Ti.UI.iOS.PreviewAction + Ti.UI.iOS.PreviewActionGroup
            	contentHeight: 300, // When unspecified, we use the available height
                pop: function() { // Called after popping the preview
                    detailWindow.open();
                }
            });

            // Assign the preview context
            var button = Ti.UI.createButton({
                previewContext: context, // Will be ignored on unsupported devices
                title : "Open Window!",
                backgroundColor: "#A6171C",
                width: 200,
                height: 50,
                tintColor: "#fff"
            });

            win.add(button);
            win.open();

  - title: PreviewContext example using a <Titanium.UI.ListView> as receiver.
    example: |
        var actions = [];
        var win = Ti.UI.createWindow({
            backgroundColor: "white"
        });

        // The view to be previewed while popping.
        var previewView = Ti.UI.createView({
            backgroundColor: "blue"
        });

        // The window to be opened after popping the preview.
        var detailWindow = Ti.UI.createWindow({
            backgroundColor: "yellow"
        });

        detailWindow.add(Ti.UI.createLabel({
            text: "You made it!"
        }));

        // The actions to be added to the preview context.
        var action = Ti.UI.iOS.createPreviewAction({
            title: "Preview Action",
            style: Ti.UI.iOS.PREVIEW_ACTION_STYLE_DEFAULT
        });

        action.addEventListener("click", function(e) {
            alert(
                "Title: " + e.title +
                "\nStyle: " + e.style +
                "\nIndex: " + e.index +
                "\nSectionIndex: " + e.sectionIndex +
                "\nItemIndex: " + e.itemIndex
            );
        });

        actions.push(action);

        // Create the preview context
        var context = Ti.UI.iOS.createPreviewContext({
            preview: previewView,
            actions: actions, // Can have both Ti.UI.iOS.PreviewAction + Ti.UI.iOS.PreviewActionGroup
            contentHeight: 300, // When unspecified, we use the available height
            pop: function(e) { // Called after popping the preview
                Ti.API.warn("sectionIndex: " + e.sectionIndex); // Index of the ListView section
                Ti.API.warn("itemIndex: " + e.itemIndex); // Index of the ListView row
                detailWindow.open();
            }
        });

        // Assign the preview context
        var listView = Ti.UI.createListView({
            previewContext: context, // Will be ignored on unsupported devices
        });

        var section1 = Ti.UI.createListSection({
            headerTitle: "Section 1"
        });

        var section2 = Ti.UI.createListSection({
            headerTitle: "Section 2"
        });

        var items = [];

        for(var i = 1; i <= 5; i++) {
            items.push({
                properties: {
                    title: "Cell #" + i
                }
            });
        }

        section1.setItems(items);
        section2.setItems(items);
        listView.setSections([section1, section2]);

        win.add(listView);
        win.open();

---
name: PreviewPopResponse
summary: Properties passed to the callback when the user pops the preview.
properties:
  - name: preview
    type: Titanium.UI.View
    summary: The <Titanium.UI.View> of the preview, that is shown on "peeking".

  - name: itemIndex
    summary: |
        The index of the clicked row, if the `previewContext` property of the <Titanium.UI.iOS.PreviewContext>
        is either a <Titanium.UI.ListView> or a <Titanium.UI.TableView>.
    type: Number

  - name: sectionIndex
    summary: |
        The index of the clicked section, if the `previewContext` property of the <Titanium.UI.iOS.PreviewContext>
        is either a <Titanium.UI.ListView> or a <Titanium.UI.TableView>.
    type: Number
